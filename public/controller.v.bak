//file controller.v
// @breif controller(コントローラ)
// @author Yusuke Matsunaga (松永 裕介)
//
// Copyright (C) 2019 Yusuke Matsunaga
// All rights reserved.
//
// [概要]
// データパスを制御する信号を生成する．
// フェイズは phasegen が生成するので
// このモジュールは完全な組み合わせ回路となる．
//
// [入力]
// cstate:     動作フェイズを表す4ビットの信号
// ir:         IRレジスタの値
// addr:       メモリアドレス(mem_wrbitsの生成に用いる)
// alu_out:    ALUの出力(分岐命令の条件判断に用いる)
//
// [出力]
// pc_sel:     PCの入力選択
// pc_ld:      PCの書き込み制御
// mem_sel:    メモリアドレスの入力選択
// mem_read:   メモリの読み込み制御
// mem_write:  メモリの書き込み制御
// mem_wrbits: メモリの書き込みビットマスク
// ir_ld:      IRレジスタの書き込み制御
// rs1_addr:   RS1アドレス
// rs2_addr:   RS2アドレス
// rd_addr:    RDアドレス
// rd_sel:     RDの入力選択
// rd_ld:      RDの書き込み制御
// a_ld:       Aレジスタの書き込み制御
// b_ld:       Bレジスタの書き込み制御
// a_sel:      ALUの入力1の入力選択
// b_sel:      ALUの入力2の入力選択
// imm:        即値
// alu_ctl:    ALUの機能コード
// c_ld:       Cレジスタの書き込み制御
module controller(input [3:0]   cstate,
		  input [31:0] 	ir,
		  input [31:0]  addr,
		  input [31:0] 	alu_out,
		  output 	pc_sel,
		  output 	pc_ld,
		  output 	mem_sel,
		  output 	mem_read,
		  output 	mem_write,
		  output [3:0] 	mem_wrbits,
		  output 	ir_ld,
		  output [4:0] 	rs1_addr,
		  output [4:0] 	rs2_addr,
		  output [4:0] 	rd_addr,
		  output [1:0] 	rd_sel,
		  output 	rd_ld,
		  output 	a_ld,
		  output 	b_ld,
		  output 	a_sel,
		  output 	b_sel,
		  output [31:0] imm,
		  output [3:0] 	alu_ctl,
		  output 	c_ld);
always@()
begin
	case(cstate)
	2'b0001
	begin
		pc_ld<=1;
		pc_sel<=0;
		memsel<=0;
		ir_ld<=1;
	end
	2'b0010:
	begin
		a_ld<=1;
		b_ld<=1;
		casex(ir)
		32'bxxxx_xxxx_xxxx_xxxx_xxxx_xxxx_x011_0111://Utype
		begin
			imm<={ir[31:12],12'b0000_0000_0000};
		end
		32'bxxxx_xxxx_xxxx_xxxx_xxxx_xxxx_x001_0111://Utype
		begin
			imm<={ir[31:12],12'b0000_0000_0000};
		end
		32'bxxxx_xxxx_xxxx_xxxx_xxxx_xxxx_x110_1111://Jtype
		begin
			casex(ir)
			32'b1xxx_xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_xxxx:
			begin
				imm<={12'b1111_1111_1111_1111,ir[31],ir[19:12],ir[20],ir[30:21],1'b0};
			end
			32'b0xxx_xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_xxxx:
			begin
				imm<={12'b0000_0000_0000_0000,ir[31],ir[19:12],ir[20],ir[30:21],1'b0};
			end
			endcase
		end
		32'bxxxx_xxxx_xxxx_xxxx_xxxx_xxxx_x010_0011://Stype
		begin
			casex(ir)
			32'b1xxx_xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_xxxx:
			begin
				imm<={20'b1111_1111_1111_1111_1111,ir[31:25],ir[11:7]};
			end
			32'b0xxx_xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_xxxx:
			begin
				imm<={20'b0000_0000_0000_0000_0000,ir[31:25],ir[11:7]};
			end	
			endcase
		end
		32'bxxxx_xxxx_xxxx_xxxx_xxxx_xxxx_x110_0011://Btype
		begin
			casex(ir)
			32'b1xxx_xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_xxxx:
			begin
				imm<={19'b111_1111_1111_1111_1111,ir[31],ir[7],ir[30:25],ir[11:8],1'b0};
			end
			32'b0xxx_xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_xxxx:
			begin
				imm<={19'b000_0000_0000_0000_0000,ir[31],ir[7],ir[30:25],ir[11:8],1'b0};
			end	
			endcase
		end
		32'bxxxx_xxxx_xxxx_xxxx_xxxx_xxxx_x000_0011://Itype
		begin
			casex(ir)
			32'b1xxx_xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_xxxx:
			begin
				imm<={20'b1111_1111_1111_1111_1111,ir[31:20]};
			end
			32'b0xxx_xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_xxxx:
			begin
				imm<={20'b0000_0000_0000_0000_0000,ir[31:20]};
			end	
			endcase
		end	
		32'bxxxx_xxxx_xxxx_xxxx_xxxx_xxxx_x001_0011://Itype
		begin
			casex(ir)
			32'b1xxx_xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_xxxx:
			begin
				imm<={20'b1111_1111_1111_1111_1111,ir[31:20]};
			end
			32'b0xxx_xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_xxxx:
			begin
				imm<={20'b0000_0000_0000_0000_0000,ir[31:20]};
			end	
			endcase
		end
		endcase	
	end
	2'b0100:
	begin
		c_ld<=1;
		casex(ir)
		32'bxxxx_xxxx_xxxx_xxxx_xxxx_xxxx_x011_0111://LUI
		begin
			alu_ctl<=4'b0000;
			b_sel<=1;
		end
		32'bxxxx_xxxx_xxxx_xxxx_xxxx_xxxx_x001_0111://AUIPC
		begin
			alu_ctl<=4'b1000;
			a_sel<=1;
			b_sel<=1;
		end
		32'bxxxx_xxxx_xxxx_xxxx_x000_xxxx_x110_1111://JAL
		begin
			alu_ctl<=4'b0000;
			b_sel<=1;
		end
		32'bxxxx_xxxx_xxxx_xxxx_xxxx_xxxx_x110_0x11://分岐アドレス計算
		begin
			alu_ctl<=4'b1000;
			a_sel<=1;
			b_sel<=1;
		end
		32'bxxxx_xxxx_xxxx_xxxx_x000_xxxx_x001_0011://ADDI
		begin
			alu_ctl<=4'b1000;
			a_sel<=0;
			b_sel<=1;
		end
		32'bxxxx_xxxx_xxxx_xxxx_x01x_xxxx_x001_0011://SLTI
		begin
			alu_ctl<=4'b0110;
			a_sel<=0;
			b_sel<=1;
		end
		32'bxxxx_xxxx_xxxx_xxxx_x100_xxxx_x001_0011://XORI
		begin
			alu_ctl<=4'b1010;
			a_sel<=0;
			b_sel<=1;
		end
		32'bxxxx_xxxx_xxxx_xxxx_x110_xxxx_x001_0011://ORI
		begin
			alu_ctl<=4'b1011;
			a_sel<=0;
			b_sel<=1;
		end
		32'bxxxx_xxxx_xxxx_xxxx_x111_xxxx_x001_0011://ANDI
		begin
			alu_ctl<=4'b1100;
			a_sel<=0;
			b_sel<=1;
		end
		32'bxxxx_xxxx_xxxx_xxxx_x001_xxxx_x001_0011://SLLI
		begin
			alu_ctl<=4'b1101;
			a_sel<=0;
			b_sel<=1;
		end
		32'bx0xx_xxxx_xxxx_xxxx_x101_xxxx_x001_0011://SRLI
		begin
			alu_ctl<=4'b1110;
			a_sel<=0;
			b_sel<=1;
		end
		32'bx1x_xxxx_xxxx_xxxx_x001_xxxx_x001_0011://SRAI
		begin
			alu_ctl<=4'b1111;
			a_sel<=0;
			b_sel<=1;
		end
		32'bxxxx_xxxx_xxxx_xxxx_xxxx_xxxx_x0x0_0011://LORD,STORE
		begin
			alu_ctl<=4'b1000;
			a_sel<=0;
			b_sel<=1;
		end
		32'bx0xx_xxxx_xxxx_xxxx_x000_xxxx_x011_0011://ADD
		begin
			alu_ctl<=4'b1000;
			a_sel<=0;
			b_sel<=0;
		end
		32'bx1xx_xxxx_xxxx_xxxx_x000_xxxx_x011_0011://SUB
		begin
			alu_ctl<=4'b1001;
			a_sel<=0;
			b_sel<=0;
		end
		32'bxxxx_xxxx_xxxx_xxxx_x001_xxxx_x011_0011://SLL
		begin
			alu_ctl<=4'b1101;
			a_sel<=0;
			b_sel<=0;
		end
		32'bxxxx_xxxx_xxxx_xxxx_x010_xxxx_x011_0011://SLT
		begin
			alu_ctl<=4'b0100;
			a_sel<=0;
			b_sel<=0;
		end
		32'bxxxx_xxxx_xxxx_xxxx_x011_xxxx_x011_0011://SLTU
		begin
			alu_ctl<=4'b0110;
			a_sel<=0;
			b_sel<=0;
		end
		32'bxxxx_xxxx_xxxx_xxxx_x100_xxxx_x011_0011://XOR
		begin
			alu_ctl<=4'b1010;
			a_sel<=0;
			b_sel<=0;
		end
		32'bx0xx_xxxx_xxxx_xxxx_x101_xxxx_x011_0011://SRL
		begin
			alu_ctl<=4'b1110;
			a_sel<=0;
			b_sel<=0;
		end
		32'bx1xx_xxxx_xxxx_xxxx_x000_xxxx_x011_0011://SRA
		begin
			alu_ctl<=4'b1111;
			a_sel<=0;
			b_sel<=0;
		end
		default:;
		endcase	
	end
	2'b1000:
	begin
		casex(ir)
		32'bxxxx_xxxx_xxxx_xxxx_xxxx_xxxx_xxx1_0011:    //演算命令
        begin
            rd_ld <= 1;
            rd_sel <= 2'b10;
        end
    	32'b:xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_x000_0011    //ロード命令
        begin
            mem_sel <= 1;
            mem_read <= 1;
            rd_sel <= 2'b00;
            rd_ld <= 1;
        end
    	32'bxxxx_xxxx_xxxx_xxxx_xxxx_xxxx_x010_0011:    //ストア命令 (Bレジスタの値をCレジスタのアドレス先に書き込む)
        begin
            mem_sel <= 1;
            mem_write <= 1;
            casex (ir)
            32'bxxxx_xxxx_xxxx_xxxx_x000_xxxx_x010_0011:    //SB
            begin
                casex (creg)
                32'bxxxx_xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_xx00: mem_wrbits <= 4'b0001;
    	        32'bxxxx_xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_xx01: mem_wrbits <= 4'b0010;
                32'bxxxx_xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_xx10: mem_wrbits <= 4'b0100; 
                32'bxxxx_xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_xx11: mem_wrbits <= 4'b1000;
                endcase 
            end
            32'bxxxx_xxxx_xxxx_xxxx_x001_xxxx_x010_0011:    //SH
            begin
                casex (creg)
                32'bxxxx_xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_xx00: mem_wrbits <= 4'b0011;
                32'bxxxx_xxxx_xxxx_xxxx_xxxx_xxxx_xxxx_xx10: mem_wrbits <= 4'b1100;  
                endcase
            end
            32'bxxxx_xxxx_xxxx_xxxx_x010_xxxx_x010_0011:    //SW
                begin
                    mem_wrbits <= 4'b1111;
                end
            endcase
        end
		32'bxxxx_xxxx_xxxx_xxxx_x000_xxxx_x110_0011://分岐命令
			casex(ir)
			32'bxxxx_xxxx_xxxx_xxxx_x000_xxxx_x110_0011://BEQ
			begin
				alu_ctl<=4'b0010;
				a_sel<=0;
				b_sel<=0;
			end
			32'bxxxx_xxxx_xxxx_xxxx_x001_xxxx_x110_0011://BNE
			begin
				alu_ctl<=4'b0011;	
				a_sel<=0;
				b_sel<=0;		
			end	
			32'bxxxx_xxxx_xxxx_xxxx_x100_xxxx_x110_0011://BLT
			begin
				alu_ctl<=4'b0100;
				a_sel<=0;
				b_sel<=0;	
			end
			32'bxxxx_xxxx_xxxx_xxxx_x101_xxxx_x110_0011://BGE
			begin
				alu_ctl<=4'b0101;
				a_sel<=0;
				b_sel<=0;	
			end
			32'bxxxx_xxxx_xxxx_xxxx_x110_xxxx_x110_0011://BLTU
			begin
				alu_ctl<=4'b0110;
				a_sel<=0;
				b_sel<=0;	
			end
			32'bxxxx_xxxx_xxxx_xxxx_x111_xxxx_x110_0011://BGEU
			begin
				alu_ctl<=4'b0111;
				a_sel<=0;
				b_sel<=0;	
			end
			endcase
			case(alu_out)
			32'b1:
			begin
				pc_ld<=1;
				pc_sel<=1;
			end
			32'b0:
			begin
				pc_ld<=1;
				pc_sel<=0;
			end
			endcase
		endcase
	end
	endcase
end
endmodule; // controller